# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# Restart Yabai
cmd + ctrl - r : yabai --restart-service;

# Restart SHKD
cmd + ctrl - s : skhd --restart-service;

#FOCUS####################################
# FOCUS DISPLAY to the Left and Right
cmd - y : yabai -m display --focus west;
cmd - o : yabai -m display --focus east;

# FOCUS WINDOW on Current Display Next and Previous
cmd - k : yabai -m window --focus north;
cmd - l : yabai -m window --focus east;
cmd - j : yabai -m window --focus south;
cmd - h : yabai -m window --focus west;

 # FOCUS SPACE on Active Display Forwards and Backwards
cmd - u : yabai -m space --focus prev;
cmd - i : yabai -m space --focus next;

 # FOCUS SPACE 1-10 and fowards and backwards
cmd - 1 : yabai -m space --focus 1;
cmd - 2 : yabai -m space --focus 2;
cmd - 3 : yabai -m space --focus 3;
cmd - 4 : yabai -m space --focus 4;
cmd - 5 : yabai -m space --focus 5;
cmd - 6 : yabai -m space --focus 6;
cmd - 7 : yabai -m space --focus 7;
cmd - 8 : yabai -m space --focus 8;
cmd - 9 : yabai -m space --focus 9;
cmd - 0 : yabai -m space --focus 10;


#WINDOW MOVEMENT##########################
# TOGGLE FULLSCREEN on Active Window
cmd + shift - f : yabai -m window --toggle zoom-fullscreen;

alt + shift -f : yabai -m window --toggle native-fullscreen
#
# CLOSE Active Window
cmd - q : yabai -m window --close;

# MOVE WINDOW within a space
cmd + shift - k : yabai -m window --swap north;
cmd + shift - l : yabai -m window --swap east;
cmd + shift - j : yabai -m window --swap south;
cmd + shift - h : yabai -m window --swap west;

cmd + shift - u : yabai -m window --space prev;
cmd + shift - i : yabai -m window --space next;

# MOVE WINDOW to the Left or Right Display
cmd + shift - o : yabai -m window --display east; yabai -m display --focus east;
cmd + shift - y : yabai -m window --display west; yabai -m display --focus west;

# MOVE WINDOW to a Specified Space 1-10
cmd + shift - 1 : yabai -m window --space 1;
cmd + shift - 2 : yabai -m window --space 2;
cmd + shift - 3 : yabai -m window --space 3;
cmd + shift - 4 : yabai -m window --space 4;
cmd + shift - 5 : yabai -m window --space 5;
cmd + shift - 6 : yabai -m window --space 6;
cmd + shift - 7 : yabai -m window --space 7;
cmd + shift - 8 : yabai -m window --space 8;
cmd + shift - 9 : yabai -m window --space 9;
cmd + shift - 0 : yabai -m window --space 10;



# Applications

# Screenshot Utility
# This is bound to what the default is in MacOS maintaing the ease
# of use from one config file.
cmd + shift - s : skhd -k "cmd + ctrl - 5";

#Terminal
cmd + shift - t : open -na /Applications/Alacritty.app;

#Browser
cmd + shift - b : open -na /Applications/Zen.app;
